/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accounts/{address}/alias": {
    /**
     * Get alias by address (tzkt or tezos domain)
     * @description Return alias of the address (tzkt or tezos domain).
     */
    get: {
      parameters: {
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": string
          }
        }
      }
    }
  }
  "/accounts/{address}/creations": {
    /**
     * Get creations by address
     * @description Return creations of the address.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters tokens created by certified artist. */
          certified?: boolean
          /** @description Filters tokens by min price. */
          minPrice?: number
          /** @description Filters tokens by max price. */
          maxPrice?: number
          /** @description Filters tokens by contracts. */
          contracts?: string[]
          /** @description Filters tokens by tag. */
          tag?: string
          /** @description Filters tokens by mimeTypes. Supported values: `image`, `gif`, `video`, `3dmodel`, `interactive`, `audio`, `svg`, `pdf`. */
          mimeTypes?: string[]
          /** @description Search tokens by title, artist, tokenId. */
          search?: string
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts creations by specified field. Supported fields: `mintTime`, `offerPrice`, `offerTime`, `swapPrice`, `swapTime`, `soldPrice`, `soldTime`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Fa2TokensDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/co-creations": {
    /**
     * Get co-creations by address
     * @description Return co-creations of the address.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters tokens created by certified artist. */
          certified?: boolean
          /** @description Creator of tokens. */
          creator?: string
          /** @description Filters tokens by min price. */
          minPrice?: number
          /** @description Filters tokens by max price. */
          maxPrice?: number
          /** @description Filters tokens by contracts. */
          contracts?: string[]
          /** @description Filters tokens by tag. */
          tag?: string
          /** @description Filters tokens by mimeTypes. Supported values: `image`, `gif`, `video`, `3dmodel`, `interactive`, `audio`, `svg`, `pdf`. */
          mimeTypes?: string[]
          /** @description Search tokens by title, artist, tokenId. */
          search?: string
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts co-creations by specified field. Supported fields: `mintTime`, `offerPrice`, `offerTime`, `swapPrice`, `swapTime`, `soldPrice`, `soldTime`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Fa2TokensDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/collections": {
    /**
     * Get collections by address
     * @description Return collections of the address (without creations of the address).
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters tokens created by certified artist. */
          certified?: boolean
          /** @description Filters tokens by min price. */
          minPrice?: number
          /** @description Filters tokens by max price. */
          maxPrice?: number
          /** @description Filters tokens by contracts. */
          contracts?: string[]
          /** @description Filters tokens by tag. */
          tag?: string
          /** @description Filters tokens by mimeTypes. Supported values: `image`, `gif`, `video`, `3dmodel`, `interactive`, `audio`, `svg`, `pdf`. */
          mimeTypes?: string[]
          /** @description Search tokens by title, artist, tokenId. */
          search?: string
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts collections by specified field. Supported fields: `mintTime`, `offerPrice`, `offerTime`, `swapPrice`, `swapTime`, `soldPrice`, `soldTime`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Fa2TokensDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/fa2tokens": {
    /**
     * Get fa2 tokens by address
     * @description Return fa2 tokens owned by the address.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters tokens created by certified artist. */
          certified?: boolean
          /** @description Filters tokens by min price. */
          minPrice?: number
          /** @description Filters tokens by max price. */
          maxPrice?: number
          /** @description Filters tokens by contracts. */
          contracts?: string[]
          /** @description Filters tokens by tag. */
          tag?: string
          /** @description Filters tokens by mimeTypes. Supported values: `image`, `gif`, `video`, `3dmodel`, `interactive`, `audio`, `svg`, `pdf`. */
          mimeTypes?: string[]
          /** @description Search tokens by title, artist, tokenId. */
          search?: string
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts fa2 tokens by specified field. Supported fields: `mintTime`, `offerPrice`, `offerTime`, `swapPrice`, `swapTime`, `soldPrice`, `soldTime`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Fa2TokensDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/auctions": {
    /**
     * Get auctions by address
     * @description Return auctions made by the address.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters auctions by min price. */
          minPrice?: number
          /** @description Filters auctions by max price. */
          maxPrice?: number
          /** @description Filters auctions by contracts. */
          contracts?: string[]
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts auctions by specified field. Supported fields: `dueTime`, `issueTime`, `price`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AuctionsDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/bundles": {
    /**
     * Get bundles by address
     * @description Return bundles made by the address.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters bundles by min price. */
          minPrice?: number
          /** @description Filters bundles by max price. */
          maxPrice?: number
          /** @description Filters bundles by contracts. */
          contracts?: string[]
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts bundles by specified field. Supported fields: `issueTime`, `price`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["BundlesDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/gachas": {
    /**
     * Get gachas by address
     * @description Return gachas made by the issuer.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters gachas by min price. */
          minPrice?: number
          /** @description Filters gachas by max price. */
          maxPrice?: number
          /** @description Filters gachas by contracts. */
          contracts?: string[]
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts gachas by specified field. Supported fields: `issueTime`, `price`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GachasDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/offers": {
    /**
     * Get offers by address
     * @description Return offers made by the address.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters offers by min price. */
          minPrice?: number
          /** @description Filters offers by max price. */
          maxPrice?: number
          /** @description Filters offers by contracts. */
          contracts?: string[]
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts offers by specified field. Supported fields: `issueTime`, `price`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["OffersDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/swaps": {
    /**
     * Get swaps by address
     * @description Return swaps made by the address.
     */
    get: {
      parameters: {
        query?: {
          /** @description Addresses of revenue share. */
          sharedAddresses?: string[]
          /** @description Filters swaps by min price. */
          minPrice?: number
          /** @description Filters swaps by max price. */
          maxPrice?: number
          /** @description Filters swaps by contracts. */
          contracts?: string[]
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts swaps by specified field. Supported fields: `issueTime`, `price`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SwapsDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/records": {
    /**
     * Get account records
     * @description Return records of an account.
     */
    get: {
      parameters: {
        query?: {
          /** @description Start time of records (inclusive). */
          startTime?: string
          /** @description End time of records (exclusive). */
          endTime?: string
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Fa2TokenRecordsDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/artist-club": {
    /**
     * Get artist club of the account
     * @description Get artist club of the account.
     */
    get: {
      parameters: {
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArtistClubDto"]
          }
        }
      }
    }
  }
  "/accounts/{address}/artist-club-stakes": {
    /**
     * Get artist club stakes of the account
     * @description Get artist club stakes of the account.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters stakes by contracts. */
          contracts?: string[]
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Account address. */
          address: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArtistClubStakesDto"]
          }
        }
      }
    }
  }
  "/artist-clubs": {
    /**
     * Get club list
     * @description Return the clubs on akaSwap.
     */
    get: {
      parameters: {
        query?: {
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts clubs by specified field. Supported fields: `totalAkaDao`, `stakingAkaDao`, `7dReward`, `totalReward`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArtistClubsDto"]
          }
        }
      }
    }
  }
  "/artist-clubs/{contract}": {
    /**
     * Get club
     * @description Return the club on akaSwap.
     */
    get: {
      parameters: {
        path: {
          /** @description Club address. */
          contract: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArtistClubDto"]
          }
        }
      }
    }
  }
  "/artist-clubs/{contract}/members": {
    /**
     * Get members of the club
     * @description Return members of the club.
     */
    get: {
      parameters: {
        query?: {
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts members by specified field. Supported fields: `stakingAkaDao`, `totalAkaDao`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
        path: {
          /** @description Club address. */
          contract: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArtistClubMembersDto"]
          }
        }
      }
    }
  }
  "/artist-clubs/{contract}/blacklist": {
    /**
     * Get blacklist of the club
     * @description Return blacklist of the club.
     */
    get: {
      parameters: {
        path: {
          /** @description Club address. */
          contract: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArtistClubBlacklistMemberDto"][]
          }
        }
      }
    }
  }
  "/artist-clubs/{contract}/records": {
    /**
     * Get club records
     * @description Return records of the club.
     */
    get: {
      parameters: {
        query?: {
          /** @description Start time of records (inclusive). */
          startTime?: string
          /** @description End time of records (exclusive). */
          endTime?: string
        }
        path: {
          /** @description Club address. */
          contract: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArtistClubIncomeRecordsDto"]
          }
        }
      }
    }
  }
  "/auctions": {
    /**
     * Get auction list
     * @description Return auctions made on akaSwap.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters auctions by min price. */
          minPrice?: number
          /** @description Filters auctions by max price. */
          maxPrice?: number
          /** @description Filters auctions by contracts. */
          contracts?: string[]
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts auctions by specified field. Supported fields: `dueTime`, `issueTime`, `price`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AuctionsDto"]
          }
        }
      }
    }
  }
  "/auctions/{contract}/{auctionId}": {
    /**
     * Get auction
     * @description Return a auction made on akaSwap.
     */
    get: {
      parameters: {
        path: {
          /** @description Contract of auction. */
          contract: string
          /** @description Id of auction. */
          auctionId: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["AuctionDto"]
          }
        }
      }
    }
  }
  "/bundles": {
    /**
     * Get bundle list
     * @description Return bundles made on akaSwap.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters bundles by min price. */
          minPrice?: number
          /** @description Filters bundles by max price. */
          maxPrice?: number
          /** @description Filters bundles by contracts. */
          contracts?: string[]
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts bundles by specified field. Supported fields: `issueTime`, `price`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["BundlesDto"]
          }
        }
      }
    }
  }
  "/bundles/{contract}/{bundleId}": {
    /**
     * Get bundle
     * @description Return a bundle made on akaSwap.
     */
    get: {
      parameters: {
        path: {
          /** @description Contract of bundle. */
          contract: string
          /** @description Id of bundle. */
          bundleId: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["BundleDto"]
          }
        }
      }
    }
  }
  "/curations/{curationName}": {
    /**
     * Get fa2 tokens of a curation
     * @description Return fa2 tokens of a curation.
     */
    get: {
      parameters: {
        path: {
          /** @description Filters by curation name. */
          curationName: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Fa2TokenDto"][][]
          }
        }
      }
    }
  }
  "/fa2tokens": {
    /**
     * Get fa2 token list
     * @description Return fa2 tokens minted on akaSwap.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters tokens created by certified artist. */
          certified?: boolean
          /** @description Filters tokens by min price. */
          minPrice?: number
          /** @description Filters tokens by max price. */
          maxPrice?: number
          /** @description Filters tokens by contracts. */
          contracts?: string[]
          /** @description Filters tokens by tag. */
          tag?: string
          /** @description Filters tokens by mimeTypes. Supported values: `image`, `gif`, `video`, `3dmodel`, `interactive`, `audio`, `svg`, `pdf`. */
          mimeTypes?: string[]
          /** @description Search tokens by title, artist, tokenId. */
          search?: string
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts fa2 tokens by specified field. Supported fields: `mintTime`, `offerPrice`, `offerTime`, `swapPrice`, `swapTime`, `soldPrice`, `soldTime`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Fa2TokensDto"]
          }
        }
      }
    }
  }
  "/fa2tokens/{contract}/{tokenId}": {
    /**
     * Get fa2 token
     * @description Return a fa2 token minted on akaSwap.
     */
    get: {
      parameters: {
        path: {
          /** @description Contract of token. */
          contract: string
          /** @description Id of token. */
          tokenId: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Fa2TokenDto"]
          }
        }
      }
    }
  }
  "/fa2tokens/{contract}/{tokenId}/records": {
    /**
     * Get fa2 token records
     * @description Return records of a fa2 token.
     */
    get: {
      parameters: {
        query?: {
          /** @description Start time of records (inclusive). */
          startTime?: string
          /** @description End time of records (exclusive). */
          endTime?: string
        }
        path: {
          /** @description Contract of token. */
          contract: string
          /** @description Id of token. */
          tokenId: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["Fa2TokenRecordsDto"]
          }
        }
      }
    }
  }
  "/gachas": {
    /**
     * Get gacha list
     * @description Return gachas made on akaSwap.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters gachas by min price. */
          minPrice?: number
          /** @description Filters gachas by max price. */
          maxPrice?: number
          /** @description Filters gachas by contracts. */
          contracts?: string[]
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts gachas by specified field. Supported fields: `issueTime`, `price`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GachasDto"]
          }
        }
      }
    }
  }
  "/gachas/{contract}/{gachaId}": {
    /**
     * Get gacha
     * @description Return a gacha made on akaSwap.
     */
    get: {
      parameters: {
        path: {
          /** @description Contract of gacha. */
          contract: string
          /** @description Id of gacha. */
          gachaId: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GachaDto"]
          }
        }
      }
    }
  }
  "/gachas/{contract}/{gachaId}/records": {
    /**
     * Get gacha records
     * @description Return records of a gacha.
     */
    get: {
      parameters: {
        path: {
          /** @description Contract of gacha. */
          contract: string
          /** @description Id of gacha. */
          gachaId: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["GachaRecordsDto"]
          }
        }
      }
    }
  }
  "/offers": {
    /**
     * Get offer list
     * @description Return offers made on akaSwap.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filters offers by min price. */
          minPrice?: number
          /** @description Filters offers by max price. */
          maxPrice?: number
          /** @description Filters offers by contracts. */
          contracts?: string[]
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts offers by specified field. Supported fields: `issueTime`, `price`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["OffersDto"]
          }
        }
      }
    }
  }
  "/offers/{contract}/{offerId}": {
    /**
     * Get offer
     * @description Return a offer made on akaSwap.
     */
    get: {
      parameters: {
        path: {
          /** @description Contract of offer. */
          contract: string
          /** @description Id of offer. */
          offerId: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["OfferDto"]
          }
        }
      }
    }
  }
  "/statistics/top-creators": {
    /**
     * Get top creator list
     * @description Return top creators on akaSwap.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by time. Supported values: `30d`, `7d`, `fixed3d`, `3d`, `1d`. */
          timeLabel?: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["TopCreatorsDto"]
          }
        }
      }
    }
  }
  "/statistics/hot-fa2tokens": {
    /**
     * Get hot fa2 token list
     * @description Return hot fa2 tokens on akaSwap.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by time. Supported values: `30d`, `7d`, `fixed3d`, `3d`, `1d`. */
          timeLabel?: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["HotFa2TokensDto"]
          }
        }
      }
    }
  }
  "/statistics/popular-artist-clubs": {
    /**
     * Get popular artist club list
     * @description Return popular artist clubs on akaSwap.
     */
    get: {
      parameters: {
        query?: {
          /** @description Sorts clubs by specified order. `totalAkaDaoFirst`: TotalAkaDao Desc -> 7dReward Desc -> CreateTime Asc. `7dRewardFirst`: 7dReward Desc -> TotalAkaDao Desc -> CreateTime Asc. */
          order?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["ArtistClubsDto"]
          }
        }
      }
    }
  }
  "/swaps": {
    /**
     * Get swap list
     * @description Return swaps made on akaSwap.
     */
    get: {
      parameters: {
        query?: {
          /** @description Addresses of revenue share. */
          sharedAddresses?: string[]
          /** @description Filters swaps by min price. */
          minPrice?: number
          /** @description Filters swaps by max price. */
          maxPrice?: number
          /** @description Filters swaps by contracts. */
          contracts?: string[]
          /** @description Sorts in ascending order or not. */
          ascending?: boolean
          /** @description Sorts swaps by specified field. Supported fields: `issueTime`, `price`. */
          sortBy?: string
          /** @description How many items should be skipped. */
          offset?: number
          /** @description Maximum number of items. */
          limit?: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SwapsDto"]
          }
        }
      }
    }
  }
  "/swaps/{contract}/{swapId}": {
    /**
     * Get swap
     * @description Return a swap made on akaSwap.
     */
    get: {
      parameters: {
        path: {
          /** @description Contract of swap. */
          contract: string
          /** @description Id of swap. */
          swapId: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            "application/json": components["schemas"]["SwapDto"]
          }
        }
      }
    }
  }
  "/transactions/swaps/{contract}/{swapId}/collect": {
    /**
     * [Testing] Build a collect transaction
     * @description Build a collect transaction without source, counter, fee, gas limit and storage limit.
     */
    get: {
      parameters: {
        query?: {
          /** @description Collect amount. */
          amount?: number
        }
        path: {
          /** @description Contract address. */
          contract: string
          /** @description Id of swap. */
          swapId: number
        }
      }
      responses: {
        /** @description Success */
        200: never
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    ArtistClubBlacklistMemberDto: {
      address?: string | null
      alias?: string | null
    }
    ArtistClubDto: {
      artist?: string | null
      artistAlias?: string | null
      contract?: string | null
      name?: string | null
      description?: string | null
      bannerUri?: string | null
      thumbnailUri?: string | null
      /** Format: int64 */
      memberCount?: number
      /** Format: int64 */
      stakingAkaDao?: number
      /** Format: int64 */
      pendingAkaDao?: number
      /** Format: int64 */
      totalMaxAkaDao?: number
      /** Format: int64 */
      singleMinAkaDao?: number
      /** Format: int64 */
      singleMaxAkaDao?: number
      /** Format: int64 */
      reward?: number
      periodRewards?: {
        [key: string]: number | undefined
      } | null
      /** Format: int64 */
      totalReward?: number
      /** Format: date-time */
      createTime?: string
    }
    ArtistClubIncomeRecordDto: {
      operationHash?: string | null
      /** Format: date-time */
      timestamp?: string
      from?: string | null
      fromAlias?: string | null
      /** Format: int64 */
      incomeAmount?: number
    }
    ArtistClubIncomeRecordsDto: {
      records: components["schemas"]["ArtistClubIncomeRecordDto"][]
    }
    ArtistClubMemberDto: {
      address?: string | null
      alias?: string | null
      /** Format: int64 */
      stakingAkaDao?: number
      /** Format: int64 */
      pendingAkaDao?: number
      /** Format: int64 */
      reward?: number
      /** Format: date-time */
      joinTime?: string
    }
    ArtistClubMembersDto: {
      members: components["schemas"]["ArtistClubMemberDto"][]
      /** Format: int64 */
      count: number
    }
    ArtistClubStakeDto: {
      artist?: string | null
      artistAlias?: string | null
      clubContract?: string | null
      clubName?: string | null
      clubThumbnailUri?: string | null
      /** Format: int64 */
      clubStakingAkaDao?: number
      /** Format: int64 */
      clubPendingAkaDao?: number
      /** Format: int64 */
      stakingAkaDao?: number
      /** Format: int64 */
      pendingAkaDao?: number
      /** Format: int64 */
      reward?: number
      /** Format: date-time */
      joinTime?: string
    }
    ArtistClubStakesDto: {
      stakes?: components["schemas"]["ArtistClubStakeDto"][] | null
      /** Format: int64 */
      count?: number
    }
    ArtistClubsDto: {
      artistClubs: components["schemas"]["ArtistClubDto"][]
      /** Format: int64 */
      count: number
    }
    AuctionDto: {
      contract?: string | null
      /** Format: int32 */
      auctionId?: number
      token?: components["schemas"]["Fa2TokenDto"]
      /** Format: int64 */
      auctionAmount?: number
      /** Format: int64 */
      startPrice?: number
      /** Format: int64 */
      directPrice?: number
      /** Format: int64 */
      currentBidPrice?: number
      /** Format: int64 */
      currentStorePrice?: number
      currentBidder?: string | null
      bidHistories?: components["schemas"]["BidHistoryDto"][] | null
      /** Format: int32 */
      raisePercentage?: number
      issuer?: string | null
      alias?: string | null
      /** Format: date-time */
      issueTime?: string
      /** Format: date-time */
      dueTime?: string
      title?: string | null
      description?: string | null
    }
    AuctionsDto: {
      auctions: components["schemas"]["AuctionDto"][]
      /** Format: int64 */
      count: number
    }
    BidHistoryDto: {
      /** Format: int64 */
      bidPrice?: number
      bidder?: string | null
      alias?: string | null
      /** Format: date-time */
      timestamp?: string
    }
    BundleDto: {
      contract?: string | null
      /** Format: int32 */
      bundleId?: number
      bundleItems?: components["schemas"]["BundleItemDto"][] | null
      /** Format: int64 */
      bundleAmount?: number
      /** Format: int64 */
      bundleTotal?: number
      /** Format: int64 */
      xtzPerBundle?: number
      issuer?: string | null
      alias?: string | null
      /** Format: date-time */
      issueTime?: string
      title?: string | null
      description?: string | null
    }
    BundleItemDto: {
      /** Format: int64 */
      amount?: number
      token?: components["schemas"]["Fa2TokenDto"]
    }
    BundlesDto: {
      bundles: components["schemas"]["BundleDto"][]
      /** Format: int64 */
      count: number
    }
    Fa2TokenAttribute: {
      name?: string | null
      value?: string | null
    }
    Fa2TokenDto: {
      contract?: string | null
      /** Format: int32 */
      tokenId?: number
      creators?: string[] | null
      aliases?: string[] | null
      /** @deprecated */
      royalties?: number[] | null
      royaltyShares?: {
        [key: string]: number | undefined
      } | null
      royaltyShareAliases?: {
        [key: string]: string | undefined
      } | null
      owners?: {
        [key: string]: number | undefined
      } | null
      ownerAliases?: {
        [key: string]: string | undefined
      } | null
      /** Format: int64 */
      amount?: number
      /** Format: int64 */
      highestSoldPrice?: number | null
      /** Format: date-time */
      highestSoldTime?: string | null
      /** Format: int64 */
      recentlySoldPrice?: number | null
      /** Format: date-time */
      recentlySoldTime?: string | null
      sale?: Record<string, unknown> | null
      metadataUri?: string | null
      name?: string | null
      description?: string | null
      mimeType?: string | null
      tags?: string[] | null
      artifactUri?: string | null
      displayUri?: string | null
      thumbnailUri?: string | null
      rights?: string | null
      rightUri?: string | null
      attributes?: components["schemas"]["Fa2TokenAttribute"][] | null
      additionalInfo?: Record<string, unknown> | null
    }
    Fa2TokenRecordDto: {
      /** Format: date-time */
      timestamp?: string
      contract?: string | null
      /** Format: int32 */
      tokenId?: number | null
      tokenName?: string | null
      tokenThumbnailUri?: string | null
      from?: string | null
      fromAlias?: string | null
      to?: string | null
      toAlias?: string | null
      address?: string | null
      alias?: string | null
      /** Format: int64 */
      amount?: number
      /** Format: int64 */
      price?: number | null
      saleContract?: string | null
      /** Format: int32 */
      saleId?: number | null
      saleTitle?: string | null
      type?: string | null
    }
    Fa2TokenRecordsDto: {
      records: components["schemas"]["Fa2TokenRecordDto"][]
    }
    Fa2TokensDto: {
      tokens: components["schemas"]["Fa2TokenDto"][]
      /** Format: int64 */
      count: number
    }
    GachaDto: {
      contract?: string | null
      /** Format: int32 */
      gachaId?: number
      gachaItems?: components["schemas"]["GachaItemDto"][] | null
      lastPrizeItems?: components["schemas"]["GachaItemDto"][] | null
      /** Format: int64 */
      gachaAmount?: number
      /** Format: int64 */
      gachaTotal?: number
      /** Format: int64 */
      xtzPerGacha?: number
      issuer?: string | null
      alias?: string | null
      /** Format: date-time */
      issueTime?: string
      /** Format: date-time */
      cancelTime?: string
      title?: string | null
      description?: string | null
    }
    GachaItemDto: {
      /** Format: int64 */
      amount?: number
      /** Format: int64 */
      total?: number
      token?: components["schemas"]["Fa2TokenDto"]
    }
    GachaRecordDto: {
      /** Format: date-time */
      timestamp?: string
      contract?: string | null
      /** Format: int32 */
      tokenId?: number
      tokenName?: string | null
      collector?: string | null
      alias?: string | null
      /** Format: int64 */
      amount?: number
    }
    GachaRecordsDto: {
      records: components["schemas"]["GachaRecordDto"][]
    }
    GachasDto: {
      gachas: components["schemas"]["GachaDto"][]
      /** Format: int64 */
      count: number
    }
    HotFa2TokenDto: {
      token?: components["schemas"]["Fa2TokenDto"]
      /** Format: int64 */
      volume?: number
    }
    HotFa2TokensDto: {
      tokens: components["schemas"]["HotFa2TokenDto"][]
    }
    OfferDto: {
      contract?: string | null
      /** Format: int32 */
      offerId?: number
      token?: components["schemas"]["Fa2TokenDto"]
      /** Format: int64 */
      offerAmount?: number
      /** Format: int64 */
      xtzPerToken?: number
      issuer?: string | null
      alias?: string | null
      /** Format: date-time */
      issueTime?: string
    }
    OffersDto: {
      offers: components["schemas"]["OfferDto"][]
      /** Format: int64 */
      count: number
    }
    SwapDto: {
      contract?: string | null
      /** Format: int32 */
      swapId?: number
      token?: components["schemas"]["Fa2TokenDto"]
      /** Format: int64 */
      swapAmount?: number
      /** Format: int64 */
      xtzPerToken?: number
      revenueShares?: {
        [key: string]: number | undefined
      } | null
      issuer?: string | null
      alias?: string | null
      /** Format: date-time */
      issueTime?: string
    }
    SwapsDto: {
      swaps: components["schemas"]["SwapDto"][]
      /** Format: int64 */
      count: number
    }
    TopCreatorDto: {
      creator?: string | null
      alias?: string | null
      /** Format: int64 */
      volume?: number
    }
    TopCreatorsDto: {
      topCreators: components["schemas"]["TopCreatorDto"][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export type operations = Record<string, never>
